{"remainingRequest":"/Users/cesar/Workspace/Alboom/boom-components/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\",[\"/Users/cesar/Workspace/Alboom/boom-components/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/cesar/Workspace/Alboom/boom-components/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/cesar/Workspace/Alboom/boom-components/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/slider/Slider.js","dependencies":[{"path":"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/slider/Slider.js","mtime":1547510271490},{"path":"/Users/cesar/Workspace/Alboom/boom-components/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cesar/Workspace/Alboom/boom-components/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/slider/Slider.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar Slider = function Slider(_ref) {\n  var props = _extends({}, _ref);\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4\n    },\n    __self: this\n  });\n};\n\nSlider.propTypes = {\n  /** Default value of slider. Use [number, number] when range is true, otherwise use number. */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n  /** disabled status of slider */\n  disabled: PropTypes.bool,\n\n  /** maximum value of slider */\n  max: PropTypes.number,\n\n  /** minimum value of slider */\n  min: PropTypes.number,\n\n  /** callback when state changes */\n  onChange: PropTypes.func,\n\n  /** dual thumb mode */\n  range: PropTypes.bool,\n\n  /** Granularity of slider. Must be greater than 0 and be divided by (max - min). */\n  step: PropTypes.number,\n\n  /** value of slider */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n  /** displayed value in the tooltip */\n  valueFormatter: PropTypes.func,\n\n  /** whether slider is vertical */\n  vertical: PropTypes.bool,\n\n  /** whether tooltip always show or never show */\n  tooltipVisible: PropTypes.bool\n};\nSlider.defaultProps = {\n  defaultValue: 0,\n  disabled: false,\n  max: 100,\n  min: 0,\n  range: false,\n  step: 1,\n  vertical: false\n};\nvar _default = Slider;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Slider, \"Slider\", \"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/slider/Slider.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/slider/Slider.js\");\n  leaveModule(module);\n})();\n\n;\nSlider.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Slider\",\n  \"props\": {\n    \"defaultValue\": {\n      \"defaultValue\": {\n        \"value\": \"0\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"number\"\n        }, {\n          \"name\": \"arrayOf\",\n          \"value\": {\n            \"name\": \"number\"\n          }\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Default value of slider. Use [number, number] when range is true, otherwise use number.\"\n    },\n    \"disabled\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"disabled status of slider\"\n    },\n    \"max\": {\n      \"defaultValue\": {\n        \"value\": \"100\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"maximum value of slider\"\n    },\n    \"min\": {\n      \"defaultValue\": {\n        \"value\": \"0\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"minimum value of slider\"\n    },\n    \"range\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"dual thumb mode\"\n    },\n    \"step\": {\n      \"defaultValue\": {\n        \"value\": \"1\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Granularity of slider. Must be greater than 0 and be divided by (max - min).\"\n    },\n    \"vertical\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"whether slider is vertical\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"callback when state changes\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"number\"\n        }, {\n          \"name\": \"arrayOf\",\n          \"value\": {\n            \"name\": \"number\"\n          }\n        }]\n      },\n      \"required\": false,\n      \"description\": \"value of slider\"\n    },\n    \"valueFormatter\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"displayed value in the tooltip\"\n    },\n    \"tooltipVisible\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"whether tooltip always show or never show\"\n    }\n  }\n};",{"version":3,"sources":["/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/slider/Slider.js"],"names":["React","PropTypes","Slider","props","propTypes","defaultValue","oneOfType","number","arrayOf","disabled","bool","max","min","onChange","func","range","step","value","valueFormatter","vertical","tooltipVisible","defaultProps"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MAAMC,KAAN;;AAAA,SAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlB;AAAA,CAAf;;AAEAD,MAAM,CAACE,SAAP,GAAmB;AACjB;AACAC,EAAAA,YAAY,EAAEJ,SAAS,CAACK,SAAV,CAAoB,CAACL,SAAS,CAACM,MAAX,EAAmBN,SAAS,CAACO,OAAV,CAAkBP,SAAS,CAACM,MAA5B,CAAnB,CAApB,CAFG;;AAGjB;AACAE,EAAAA,QAAQ,EAAER,SAAS,CAACS,IAJH;;AAKjB;AACAC,EAAAA,GAAG,EAAEV,SAAS,CAACM,MANE;;AAOjB;AACAK,EAAAA,GAAG,EAAEX,SAAS,CAACM,MARE;;AASjB;AACAM,EAAAA,QAAQ,EAAEZ,SAAS,CAACa,IAVH;;AAWjB;AACAC,EAAAA,KAAK,EAAEd,SAAS,CAACS,IAZA;;AAajB;AACAM,EAAAA,IAAI,EAAEf,SAAS,CAACM,MAdC;;AAejB;AACAU,EAAAA,KAAK,EAAEhB,SAAS,CAACK,SAAV,CAAoB,CAACL,SAAS,CAACM,MAAX,EAAmBN,SAAS,CAACO,OAAV,CAAkBP,SAAS,CAACM,MAA5B,CAAnB,CAApB,CAhBU;;AAiBjB;AACAW,EAAAA,cAAc,EAAEjB,SAAS,CAACa,IAlBT;;AAmBjB;AACAK,EAAAA,QAAQ,EAAElB,SAAS,CAACS,IApBH;;AAqBjB;AACAU,EAAAA,cAAc,EAAEnB,SAAS,CAACS;AAtBT,CAAnB;AAyBAR,MAAM,CAACmB,YAAP,GAAsB;AACpBhB,EAAAA,YAAY,EAAE,CADM;AAEpBI,EAAAA,QAAQ,EAAE,KAFU;AAGpBE,EAAAA,GAAG,EAAE,GAHe;AAIpBC,EAAAA,GAAG,EAAE,CAJe;AAKpBG,EAAAA,KAAK,EAAE,KALa;AAMpBC,EAAAA,IAAI,EAAE,CANc;AAOpBG,EAAAA,QAAQ,EAAE;AAPU,CAAtB;eAUejB,M;AAAf;;;;;;;;;;;;0BArCMA,M","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Slider = ({ ...props }) => <div />\n\nSlider.propTypes = {\n  /** Default value of slider. Use [number, number] when range is true, otherwise use number. */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n  /** disabled status of slider */\n  disabled: PropTypes.bool,\n  /** maximum value of slider */\n  max: PropTypes.number,\n  /** minimum value of slider */\n  min: PropTypes.number,\n  /** callback when state changes */\n  onChange: PropTypes.func,\n  /** dual thumb mode */\n  range: PropTypes.bool,\n  /** Granularity of slider. Must be greater than 0 and be divided by (max - min). */\n  step: PropTypes.number,\n  /** value of slider */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n  /** displayed value in the tooltip */\n  valueFormatter: PropTypes.func,\n  /** whether slider is vertical */\n  vertical: PropTypes.bool,\n  /** whether tooltip always show or never show */\n  tooltipVisible: PropTypes.bool\n}\n\nSlider.defaultProps = {\n  defaultValue: 0,\n  disabled: false,\n  max: 100,\n  min: 0,\n  range: false,\n  step: 1,\n  vertical: false\n}\n\nexport default Slider\n"]}]}