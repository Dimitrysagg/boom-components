{"remainingRequest":"/Users/cesar/Workspace/Alboom/boom-components/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\",[\"/Users/cesar/Workspace/Alboom/boom-components/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/cesar/Workspace/Alboom/boom-components/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/cesar/Workspace/Alboom/boom-components/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/autocomplete/Autocomplete.js","dependencies":[{"path":"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/autocomplete/Autocomplete.js","mtime":1547477323669},{"path":"/Users/cesar/Workspace/Alboom/boom-components/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cesar/Workspace/Alboom/boom-components/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/autocomplete/Autocomplete.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar AutoComplete = function AutoComplete(_ref) {\n  var props = _extends({}, _ref);\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4\n    },\n    __self: this\n  });\n};\n\nAutoComplete.propTypes = {\n  /** whether activate first option by default */\n  activateFirstOption: PropTypes.bool,\n\n  /** whether input content can be removed with clear icon */\n  clearable: PropTypes.bool,\n\n  /** data source for autocomplete */\n  dataSource: PropTypes.arrayOf(PropTypes.string),\n\n  /** initial open state of dropdown */\n  defaultOpen: PropTypes.bool,\n\n  /** initial selected option */\n  defaultValue: PropTypes.string,\n\n  /** disabled state of the input */\n  disabled: PropTypes.string,\n\n  /** fulfill input with selected item when using keyboard */\n  fulfill: PropTypes.bool,\n\n  /** callback when dropdown open or close */\n  onOpenStateChange: PropTypes.func,\n\n  /** callback when searching items */\n  onSearch: PropTypes.func,\n\n  /** callback when an option is selected */\n  onSelect: PropTypes.func,\n\n  /** open state of dropdown */\n  open: PropTypes.bool,\n\n  /** placeholder of input */\n  placeholder: PropTypes.string,\n\n  /** selected option */\n  value: PropTypes.string\n};\nAutoComplete.defaultProps = {\n  activateFirstOption: true,\n  clearable: false,\n  disabled: false,\n  fulfill: false\n};\nvar _default = AutoComplete;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(AutoComplete, \"AutoComplete\", \"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/autocomplete/Autocomplete.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/autocomplete/Autocomplete.js\");\n  leaveModule(module);\n})();\n\n;\nAutoComplete.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"AutoComplete\",\n  \"props\": {\n    \"activateFirstOption\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"whether activate first option by default\"\n    },\n    \"clearable\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"whether input content can be removed with clear icon\"\n    },\n    \"disabled\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"disabled state of the input\"\n    },\n    \"fulfill\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"fulfill input with selected item when using keyboard\"\n    },\n    \"dataSource\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"string\"\n        }\n      },\n      \"required\": false,\n      \"description\": \"data source for autocomplete\"\n    },\n    \"defaultOpen\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"initial open state of dropdown\"\n    },\n    \"defaultValue\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"initial selected option\"\n    },\n    \"onOpenStateChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"callback when dropdown open or close\"\n    },\n    \"onSearch\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"callback when searching items\"\n    },\n    \"onSelect\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"callback when an option is selected\"\n    },\n    \"open\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"open state of dropdown\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"placeholder of input\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"selected option\"\n    }\n  }\n};",{"version":3,"sources":["/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/autocomplete/Autocomplete.js"],"names":["React","PropTypes","AutoComplete","props","propTypes","activateFirstOption","bool","clearable","dataSource","arrayOf","string","defaultOpen","defaultValue","disabled","fulfill","onOpenStateChange","func","onSearch","onSelect","open","placeholder","value","defaultProps"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAMC,KAAN;;AAAA,SAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlB;AAAA,CAArB;;AAEAD,YAAY,CAACE,SAAb,GAAyB;AACvB;AACAC,EAAAA,mBAAmB,EAAEJ,SAAS,CAACK,IAFR;;AAGvB;AACAC,EAAAA,SAAS,EAAEN,SAAS,CAACK,IAJE;;AAKvB;AACAE,EAAAA,UAAU,EAAEP,SAAS,CAACQ,OAAV,CAAkBR,SAAS,CAACS,MAA5B,CANW;;AAOvB;AACAC,EAAAA,WAAW,EAAEV,SAAS,CAACK,IARA;;AASvB;AACAM,EAAAA,YAAY,EAAEX,SAAS,CAACS,MAVD;;AAWvB;AACAG,EAAAA,QAAQ,EAAEZ,SAAS,CAACS,MAZG;;AAavB;AACAI,EAAAA,OAAO,EAAEb,SAAS,CAACK,IAdI;;AAevB;AACAS,EAAAA,iBAAiB,EAAEd,SAAS,CAACe,IAhBN;;AAiBvB;AACAC,EAAAA,QAAQ,EAAEhB,SAAS,CAACe,IAlBG;;AAmBvB;AACAE,EAAAA,QAAQ,EAAEjB,SAAS,CAACe,IApBG;;AAqBvB;AACAG,EAAAA,IAAI,EAAElB,SAAS,CAACK,IAtBO;;AAuBvB;AACAc,EAAAA,WAAW,EAAEnB,SAAS,CAACS,MAxBA;;AAyBvB;AACAW,EAAAA,KAAK,EAAEpB,SAAS,CAACS;AA1BM,CAAzB;AA6BAR,YAAY,CAACoB,YAAb,GAA4B;AAC1BjB,EAAAA,mBAAmB,EAAE,IADK;AAE1BE,EAAAA,SAAS,EAAE,KAFe;AAG1BM,EAAAA,QAAQ,EAAE,KAHgB;AAI1BC,EAAAA,OAAO,EAAE;AAJiB,CAA5B;eAOeZ,Y;AAAf;;;;;;;;;;;;0BAtCMA,Y","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst AutoComplete = ({ ...props }) => <div />\n\nAutoComplete.propTypes = {\n  /** whether activate first option by default */\n  activateFirstOption: PropTypes.bool,\n  /** whether input content can be removed with clear icon */\n  clearable: PropTypes.bool,\n  /** data source for autocomplete */\n  dataSource: PropTypes.arrayOf(PropTypes.string),\n  /** initial open state of dropdown */\n  defaultOpen: PropTypes.bool,\n  /** initial selected option */\n  defaultValue: PropTypes.string,\n  /** disabled state of the input */\n  disabled: PropTypes.string,\n  /** fulfill input with selected item when using keyboard */\n  fulfill: PropTypes.bool,\n  /** callback when dropdown open or close */\n  onOpenStateChange: PropTypes.func,\n  /** callback when searching items */\n  onSearch: PropTypes.func,\n  /** callback when an option is selected */\n  onSelect: PropTypes.func,\n  /** open state of dropdown */\n  open: PropTypes.bool,\n  /** placeholder of input */\n  placeholder: PropTypes.string,\n  /** selected option */\n  value: PropTypes.string\n}\n\nAutoComplete.defaultProps = {\n  activateFirstOption: true,\n  clearable: false,\n  disabled: false,\n  fulfill: false\n}\n\nexport default AutoComplete\n"]}]}