{"remainingRequest":"/Users/cesar/Workspace/Alboom/boom-components/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\",[\"/Users/cesar/Workspace/Alboom/boom-components/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/cesar/Workspace/Alboom/boom-components/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/cesar/Workspace/Alboom/boom-components/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/dropdown/Dropdown.js","dependencies":[{"path":"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/dropdown/Dropdown.js","mtime":1547557377875},{"path":"/Users/cesar/Workspace/Alboom/boom-components/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cesar/Workspace/Alboom/boom-components/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/dropdown/Dropdown.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar Dropdown = function Dropdown(_ref) {\n  var props = _extends({}, _ref);\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4\n    },\n    __self: this\n  });\n};\n\nDropdown.propTypes = {\n  /** whether dropdown menu is disabled */\n  disabled: PropTypes.bool,\n\n  /** Set the container of the dropdown menu. The default is to create a div element in body, you can reset it to the scrolling area and make a relative reposition. */\n  getPopupContainer: PropTypes.func,\n\n  /** the dropdown content */\n  content: PropTypes.node,\n\n  /** placement of content */\n  position: PropTypes.oneOf(['bottomCenter', 'bottomLeft', 'bottomRight', 'topCenter', 'topLeft', 'topRight']),\n\n  /** trigger which executes the dropdown action (hover doesn't work on mobile devices) */\n  trigger: PropTypes.arrayOf(PropTypes.oneOf(['click', 'contextMenu', 'hover'])),\n\n  /** callback when content show or hide */\n  onVisibleChange: PropTypes.func\n};\nDropdown.defaultProps = {\n  disabled: false,\n  getPopupContainer: function getPopupContainer() {\n    return document.body;\n  },\n  position: 'bottomLeft',\n  trigger: ['hover']\n};\nvar _default = Dropdown;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Dropdown, \"Dropdown\", \"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/dropdown/Dropdown.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/dropdown/Dropdown.js\");\n  leaveModule(module);\n})();\n\n;\nDropdown.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Dropdown\",\n  \"props\": {\n    \"disabled\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"whether dropdown menu is disabled\"\n    },\n    \"getPopupContainer\": {\n      \"defaultValue\": {\n        \"value\": \"() => document.body\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Set the container of the dropdown menu. The default is to create a div element in body, you can reset it to the scrolling area and make a relative reposition.\"\n    },\n    \"position\": {\n      \"defaultValue\": {\n        \"value\": \"'bottomLeft'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'bottomCenter'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'bottomLeft'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'bottomRight'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'topCenter'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'topLeft'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'topRight'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"placement of content\"\n    },\n    \"trigger\": {\n      \"defaultValue\": {\n        \"value\": \"['hover']\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"enum\",\n          \"value\": [{\n            \"value\": \"'click'\",\n            \"computed\": false\n          }, {\n            \"value\": \"'contextMenu'\",\n            \"computed\": false\n          }, {\n            \"value\": \"'hover'\",\n            \"computed\": false\n          }]\n        }\n      },\n      \"required\": false,\n      \"description\": \"trigger which executes the dropdown action (hover doesn't work on mobile devices)\"\n    },\n    \"content\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"the dropdown content\"\n    },\n    \"onVisibleChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"callback when content show or hide\"\n    }\n  }\n};",{"version":3,"sources":["/Users/cesar/Workspace/Alboom/boom-components/src/components/data-entry/dropdown/Dropdown.js"],"names":["React","PropTypes","Dropdown","props","propTypes","disabled","bool","getPopupContainer","func","content","node","position","oneOf","trigger","arrayOf","onVisibleChange","defaultProps","document","body"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAAMC,KAAN;;AAAA,SAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlB;AAAA,CAAjB;;AAEAD,QAAQ,CAACE,SAAT,GAAqB;AACnB;AACAC,EAAAA,QAAQ,EAAEJ,SAAS,CAACK,IAFD;;AAGnB;AACAC,EAAAA,iBAAiB,EAAEN,SAAS,CAACO,IAJV;;AAKnB;AACAC,EAAAA,OAAO,EAAER,SAAS,CAACS,IANA;;AAOnB;AACAC,EAAAA,QAAQ,EAAEV,SAAS,CAACW,KAAV,CAAgB,CAAC,cAAD,EAAiB,YAAjB,EAA+B,aAA/B,EAA8C,WAA9C,EAA2D,SAA3D,EAAsE,UAAtE,CAAhB,CARS;;AASnB;AACAC,EAAAA,OAAO,EAAEZ,SAAS,CAACa,OAAV,CAAkBb,SAAS,CAACW,KAAV,CAAgB,CAAC,OAAD,EAAU,aAAV,EAAyB,OAAzB,CAAhB,CAAlB,CAVU;;AAWnB;AACAG,EAAAA,eAAe,EAAEd,SAAS,CAACO;AAZR,CAArB;AAeAN,QAAQ,CAACc,YAAT,GAAwB;AACtBX,EAAAA,QAAQ,EAAE,KADY;AAEtBE,EAAAA,iBAAiB,EAAE;AAAA,WAAMU,QAAQ,CAACC,IAAf;AAAA,GAFG;AAGtBP,EAAAA,QAAQ,EAAE,YAHY;AAItBE,EAAAA,OAAO,EAAE,CAAC,OAAD;AAJa,CAAxB;eAOeX,Q;AAAf;;;;;;;;;;;;0BAxBMA,Q","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Dropdown = ({ ...props }) => <div />\n\nDropdown.propTypes = {\n  /** whether dropdown menu is disabled */\n  disabled: PropTypes.bool,\n  /** Set the container of the dropdown menu. The default is to create a div element in body, you can reset it to the scrolling area and make a relative reposition. */\n  getPopupContainer: PropTypes.func,\n  /** the dropdown content */\n  content: PropTypes.node,\n  /** placement of content */\n  position: PropTypes.oneOf(['bottomCenter', 'bottomLeft', 'bottomRight', 'topCenter', 'topLeft', 'topRight']),\n  /** trigger which executes the dropdown action (hover doesn't work on mobile devices) */\n  trigger: PropTypes.arrayOf(PropTypes.oneOf(['click', 'contextMenu', 'hover'])),\n  /** callback when content show or hide */\n  onVisibleChange: PropTypes.func\n}\n\nDropdown.defaultProps = {\n  disabled: false,\n  getPopupContainer: () => document.body,\n  position: 'bottomLeft',\n  trigger: ['hover']\n}\n\nexport default Dropdown\n"]}]}